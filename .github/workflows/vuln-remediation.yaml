name: Container Vulnerability Remediation
on:
  push:
    branches: [ master ]
  # schedule:
  #   - cron: '0 0 * * *'  # Daily at midnight
  # workflow_dispatch:  # Manual trigger

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  build-scan-remediate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'admin-dashboard',
          'config-server',
          'eureka-server',
          'hystrix-dashboard',
          'service-a',
          'service-b'
        ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Build ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          # Only build if it's a Maven project
          if [ -f pom.xml ]; then
            mvn clean package -DskipTests
          fi
          
      - name: Upgrade Java Version in Dockerfile
        run: |
          cd ${{ matrix.service }}
          # Upgrade from Java 8 to Java 17
          sed -i 's/FROM openjdk:8-jdk-alpine/FROM eclipse-temurin:17-jdk-alpine/g' Dockerfile
          sed -i 's/java -jar/\/opt\/java\/openjdk\/bin\/java -jar/g' Dockerfile
          # Update JAR reference to use service name
          sed -i "s/ADD target\/.*\.jar/ADD ${{ matrix.service }}.jar/g" Dockerfile
        
      - name: Build Docker image for ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          docker build -t ${{ matrix.service }}:${{ github.sha }} .
        
      - name: Run Trivy scan for ${{ matrix.service }}
        id: trivy-scan-${{ matrix.service }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:${{ github.sha }}
          format: 'json'
          output: trivy-results-${{ matrix.service }}.json
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: false
          exit-code: 0
      
      - name: Analyze scan results for ${{ matrix.service }}
        id: analyze-${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          vuln_count=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length' trivy-results-${{ matrix.service }}.json)
          fixable_count=$(jq '[.Results[].Vulnerabilities[] | select((.Severity == "CRITICAL" or .Severity == "HIGH") and .FixedVersion != null)] | length' trivy-results-${{ matrix.service }}.json)
          
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT
          echo "fixable_count=$fixable_count" >> $GITHUB_OUTPUT
          echo "service=${{ matrix.service }}" >> $GITHUB_OUTPUT
      
      - name: Auto-remediate ${{ matrix.service }}
        id: remediate-${{ matrix.service }}
        if: ${{ steps.analyze-${{ matrix.service }}.outputs.fixable_count != '0' }}
        run: |
          cd ${{ matrix.service }}
          python3 ../scripts/auto-patch.py trivy-results-${{ matrix.service }}.json
          echo "patch_status=$?" >> $GITHUB_OUTPUT
          
          # Format patch report
          fixed_list=$(jq -r '[.Results[].Vulnerabilities[] | select(.FixedVersion != null) | "| \(.PkgName) | \(.Severity) | \(.VulnerabilityID) | \(.InstalledVersion) â†’ \(.FixedVersion) |"] | unique | .[]' trivy-results-${{ matrix.service }}.json)
          echo "fixed_list<<EOF" >> $GITHUB_OUTPUT
          echo "$fixed_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Commit changes for ${{ matrix.service }}
        if: ${{ steps.remediate-${{ matrix.service }}.outputs.patch_status == '0' }}
        run: |
          cd ${{ matrix.service }}
          git add Dockerfile
          git config user.name "security-bot"
          git config user.email "security-bot@users.noreply.github.com"
          git commit -m "fix(security): Auto-patch vulnerabilities in ${{ matrix.service }}"
          # Move back to root for next service
          cd ..
    
    # Post job to handle PR creation
    outputs:
      patched: ${{ steps.remediate-${{ matrix.service }}.outputs.patch_status == '0' }}
      service: ${{ steps.analyze-${{ matrix.service }}.outputs.service }}
      fixed_list: ${{ steps.remediate-${{ matrix.service }}.outputs.fixed_list }}
      vuln_count: ${{ steps.analyze-${{ matrix.service }}.outputs.vuln_count }}
      fixable_count: ${{ steps.analyze-${{ matrix.service }}.outputs.fixable_count }}
  
  create-pr:
    needs: build-scan-remediate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Security Patch: Vulnerability Remediation"
          commit-message: "fix(security): Auto-patch vulnerabilities across services"
          body: |
            ## Automated Vulnerability Fixes
            
            This PR contains security patches for multiple services:
            
            ${{ join(needs.build-scan-remediate.outputs.*.fixed_list, '\n') }}
            
            **Services Patched:**
            ${{ join(needs.build-scan-remediate.outputs.*.service, ', ') }}
            
            **Scan Report Summary:**
            Total vulnerabilities fixed: ${{ sum(needs.build-scan-remediate.outputs.*.fixable_count) }}
            
            Auto-generated by GitHub Actions workflow.
          labels: security,automated
