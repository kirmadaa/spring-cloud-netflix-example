name: Container Vulnerability Remediation
on:
  push:
    branches: [ master ]
  # schedule:
  #   - cron: '0 0 * * *'  # Daily at midnight
  # workflow_dispatch:  # Manual trigger

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  build-scan-remediate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
      
      - name: Build application
        run: mvn clean package -DskipTests
        
      - name: Build Docker image
        run: docker build -t spring-app:${{ github.sha }} .
        
      - name: Run Trivy vulnerability scan
        id: trivy-scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: spring-app:${{ github.sha }}
          format: 'json'
          output: trivy-results.json
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: false
          exit-code: 0
      
      - name: Analyze scan results
        id: analyze
        run: |
          vuln_count=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH")] | length' trivy-results.json)
          fixable_count=$(jq '[.Results[].Vulnerabilities[] | select((.Severity == "CRITICAL" or .Severity == "HIGH") and .FixedVersion != null)] | length' trivy-results.json)
          
          echo "Total vulnerabilities: $vuln_count"
          echo "Fixable vulnerabilities: $fixable_count"
          
          echo "vuln_count=$vuln_count" >> $GITHUB_OUTPUT
          echo "fixable_count=$fixable_count" >> $GITHUB_OUTPUT
      
      - name: Auto-remediate fixable vulnerabilities
        id: remediate
        if: ${{ steps.analyze.outputs.fixable_count != '0' }}
        run: |
          python3 scripts/auto-patch.py trivy-results.json
          echo "patch_status=$?" >> $GITHUB_OUTPUT
          
          # Format patch report
          fixed_list=$(jq -r '[.Results[].Vulnerabilities[] | select(.FixedVersion != null) | "| \(.PkgName) | \(.Severity) | \(.VulnerabilityID) | \(.InstalledVersion) â†’ \(.FixedVersion) |"] | unique | .[]' trivy-results.json)
          echo "fixed_list<<EOF" >> $GITHUB_OUTPUT
          echo "$fixed_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Commit and push remediation
        if: ${{ steps.remediate.outputs.patch_status == '0' }}
        run: |
          git config user.name "security-bot"
          git config user.email "security-bot@users.noreply.github.com"
          git add Dockerfile
          git commit -m "fix(security): Auto-patch vulnerabilities"
          git push origin HEAD:auto-patch-${{ github.run_id }}
      
      - name: Create Pull Request
        if: ${{ steps.remediate.outputs.patch_status == '0' }}
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Security Patch: Vulnerability Remediation"
          branch: auto-patch-${{ github.run_id }}
          base: master
          body: |
            ## Automated Vulnerability Fixes
            
            This PR contains security patches for the following vulnerabilities:
            
            | Package | Severity | CVE ID | Version Update |
            |---------|----------|--------|----------------|
            ${{ steps.remediate.outputs.fixed_list }}
            
            **Scan Report Summary:**
            - Total vulnerabilities found: ${{ steps.analyze.outputs.vuln_count }}
            - Fixable vulnerabilities: ${{ steps.analyze.outputs.fixable_count }}
            
            Auto-generated by GitHub Actions workflow.
          labels: security,automated
      
      - name: Create issue for unfixable vulnerabilities
        if: ${{ steps.analyze.outputs.vuln_count != '0' && steps.remediate.outputs.patch_status != '0' }}
        uses: actions/github-script@v6
        with:
          script: |
            const report = require('./trivy-results.json');
            const criticalVulns = report.Results.flatMap(r => 
              r.Vulnerabilities.filter(v => v.Severity === 'CRITICAL' && !v.FixedVersion)
            );
            
            if (criticalVulns.length > 0) {
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "ðŸš¨ Critical Vulnerabilities Requiring Manual Remediation",
                body: `## Unfixable Critical Vulnerabilities Detected
                
                **Image:** spring-app:${{ github.sha }}
                **Scan Date:** ${new Date().toISOString()}
                
                | Package | CVE ID | Installed Version | Severity |
                |---------|--------|-------------------|----------|
                ${criticalVulns.map(v => `| ${v.PkgName} | ${v.VulnerabilityID} | ${v.InstalledVersion} | ${v.Severity} |`).join('\n')}
                
                ### Recommended Actions:
                1. Upgrade base image
                2. Remove unnecessary packages
                3. Apply manual security patches`
              });
            }
